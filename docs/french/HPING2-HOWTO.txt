N.B. : ce HOWTO n'est pas termin�, et par endroits tr鑣 b阾e. Je laisse cela
      ici seulement parce que peut 阾re que c'est mieux que rien.

HPING2 HOWTO

Changes Log
-----------
Aug 7 1999		vi HPING2-HOWTO.txt
Aug 8 1999		__0000, __0001, __0002, __0003
Aug 10 1999		__0004

Index
-----
[cherchez __XXXX afin de sauter au point que vous souhaitez]

	__0000: Avis de copyright
	__0001: Qu'est ce que hping ?
        __0002: Qu'est ce que j'ai besoin de conna顃re de TCP/IP pour
                utiliser hping ?
	__0003: Premiers pas avec hping
	__0004: Le champ IP id et comment scanner des ports TCP en utilisant
                de l'usurpation d'adresse.
	__0005: Comment tester des r鑗les de filtrage. (A faire)
	__0006: Comment transf閞er des fichier au travers de firewalls. (A
                faire)

	__000A: Exemple d'utilisation de hping (A faire)

__0000: Avis de copyright, Licence, et tout ce genre de choses

  Copyright (C) Salvatore Sanfilippo, 1999.

  La permission est accord閑 de faire et distribuer des copies de ce manuel
  � condition que l'avis de copyright et cet avis de permission soient
  pr閟erv閟 sur toutes les copies.

  Permission est accord閑 de copier et distribuer des versions modifi閑s de
  ce manuel sous les conditions de copie verbatim, � condition que le
  travail d閞iv� soit distribu� sous les termes d'un avis de permission
  identique � celui-ci. Les traductions tombent dans la cat間orie des
  ''versions modifi閑s.''

  Garantie : Aucune.

  Recommandations : les redistributions commerciales sont autoris閑s et
  encourag閑s; cependant, il est fortement recommand� que le redistributeur
  contacte l'auteur avant redistribution, dans l'int閞阾 de garder les
  choses � jour (vous pouvez m'envoyer une copie de ce que vous faites
  pendant que vous y 阾es). Les traducteurs sont 間alement encourag閟 �
  contacter l'auteur avant traduction. Le version imprim閑 aura plus
  d'allure.
  Recyclez.

__0001 : Qu'est ce que hping ?

  Hping est un logiciel pour tester des piles TCP/IP, pour d閏ouvrir des
  politiques de firewalls, pour scanner les ports TCP de nombreuses mani鑢es
  diff閞entes, pour transf閞er les fichiers au travers de firewalls et
  beaucoup d'autres choses. En utilisant hping vous pouvez m阭e faire
  beaucoup de choses qui ne concernent pas la s閏urit�. Par exemples vous
  pouvez tester les performances r閟eau, v閞ifier si un syst鑝e tourne,
  v閞ifier si le champ TOS est g閞�, etc.

__0002 : Qu'est ce que j'ai besoin de conna顃re de TCP/IP pour utiliser
         hping ?

  Si vous connaissez TCP/IP vous trouverez hping tr鑣 utile, sinon vous
  pouvez utiliser hping seulement pour faire des tests connus. Voir __000A
  pour quelques exemples.

__0003 : Premiers pas avec hping

  La plus simple utilisation de hping est la suivante :

	#hping host

  Cette commande envoie un paquet TCP sans drapeau au port 0 du syst鑝e
  cible chaque seconde et montre les r閜onses du syst鑝e. Par exemple :

# hping www.debian.org
ppp0 default routing interface selected (according to /proc)
HPING www.debian.org (ppp0 209.81.8.242): NO FLAGS are set, 40 headers + 0 data bytes
40 bytes from 209.81.8.242: flags=RA seq=0 ttl=243 id=63667 win=0 time=369.4 ms
40 bytes from 209.81.8.242: flags=RA seq=1 ttl=243 id=63719 win=0 time=420.0 ms
40 bytes from 209.81.8.242: flags=RA seq=2 ttl=243 id=63763 win=0 time=350.0 ms
[Ctrl+C]
--- www.debian.org hping statistic ---
3 packets tramitted, 3 packets received, 0% packet loss

  Comme vous pouvez le voir le syst鑝e r閜ond avec un paquet TCP avec les
  drapeaux RST et ACK positionn閟. Ainsi vous 阾es capable d'effectuer un
  'ping TCP', utile quand ICMP est filtr�. Par d閒aut le port 0 est utilis�
  parce qu'il serait 閠range qu'il soit � l'閠at LISTEN (ndt : en 閏oute). 
  Si nous envoyons un paquet TCP sans drapeau � un port � l'閠at LISTEN, de
  nombreuses piles TCP/IP ne renverront pas de r閜onse. Ainsi nous sommes
  capables de savoir si un port est dans l'閠at LISTEN. Par exemple :

# hping www.debian.org -p 80
ppp0 default routing interface selected (according to /proc)
HPING www.debian.org (ppp0 209.81.8.242): NO FLAGS are set, 40 headers + 0 data bytes
[Ctrl+C]
--- www.debian.org hping statistic ---
5 packets trasmitted, 0 packets received, 100% packet loss

  Puisque le port 80 de www.debian.org est en mode LISTEN nous n'obtenons
  aucune r閜onse.

  Mais qu'arrive-t-il si nous essayons de 'hpinger' un port bloqu� par un
  firewall ? Cela d閜end de la politique / configuration du firewall. 
  Habituellement nous obtenons un paquet ICMP ou rien. Par exemple :

# hping www.yahoo.com -p 79
ppp0 default routing interface selected (according to /proc)
HPING www.yahoo.com (ppp0 204.71.200.67): NO FLAGS are set, 40 headers + 0 data bytes
ICMP Packet filtered from 206.132.254.41  (pos1-0-2488M.hr8.SNV.globalcenter.net)

--- www.yahoo.com hping statistic ---
14 packets tramitted, 0 packets received, 100% packet loss

  Le firewall de yahoo ne permet pas de connexion sur le port 79, donc il
  r閜ond avec un paquet ICMP Packet filtered (ICMP unreachable code 13). 
  Cependant il y a beaucoup de firewalls qui ignorent simplement le paquet. 
  Par exemple :

# hping www.microsoft.com -p 79
ppp0 default routing interface selected (according to /proc)
HPING www.microsoft.com (ppp0 207.46.130.150): NO FLAGS are set, 40 headers + 0 data bytes

--- www.microsoft.com hping statistic ---
4 packets tramitted, 0 packets received, 100% packet loss

  Aucune r閜onse de microsoft. Est-ce que le port est bloqu� ou en mode
  LISTEN ? D閏ouvrir cela est tr鑣 simple. Nous essayons juste de mettre le
  drapeau ACK au lieu d'envoyer un paquet TCP sans drapeau. Si le syst鑝e
  r閜ond, peut-阾re que ce port est en mode LISTEN (mais il est possible
  qu'il y ait une r鑗le qui refuse les paquets TCP sans drapeau mais
  autorise les paquets ACK).

# hping www.microsoft.com -A -p 79
ppp0 default routing interface selected (according to /proc)
HPING www.microsoft.com (ppp0 207.46.130.149): A set, 40 headers + 0 data bytes

--- www.microsoft.com hping statistic ---
3 packets tramitted, 0 packets received, 100% packet loss

  Toujours pas de r閜onse, ainsi ce port semble 阾re filtr�. Quoi qu'il en
  soit, il est possible que microsoft utilise un firewall 'intelligent' qui
  sait que pour me connecter je dois d'abord envoyer un paquet SYN.

# hping www.microsoft.com -S -p 79
ppp0 default routing interface selected (according to /proc)
HPING www.microsoft.com (ppp0 207.46.130.149): S set, 40 headers + 0 data bytes

--- www.microsoft.com hping statistic ---
3 packets tramitted, 0 packets received, 100% packet loss

  Ok.. il semble que le port 79 de microsoft est r閑llement filtr�.
  Pour clarification nous envoyons quelques paquets ACK au port 80 de
  www.debian.org :

# hping www.debian.org -p 80 -A
ppp0 default routing interface selected (according to /proc)
HPING www.debian.org (ppp0 209.81.8.242): A set, 40 headers + 0 data bytes
40 bytes from 209.81.8.242: flags=R seq=0 ttl=243 id=5590 win=0 time=379.5 ms
40 bytes from 209.81.8.242: flags=R seq=1 ttl=243 id=5638 win=0 time=370.0 ms
40 bytes from 209.81.8.242: flags=R seq=2 ttl=243 id=5667 win=0 time=360.0 ms

--- www.debian.org hping statistic ---
3 packets tramitted, 3 packets received, 0% packet loss

  Nous pouvons voir les r閜onses m阭e si le port 80 est en mode LISTEN parce
  qu'un port en mode LISTEN ne devrait pas r閜ondre � des paquets TCP avec
  seulement un drapeau NULL, FIN, Xmas, ou Ymas. ACK et RST sont deux
  drapeaux TCP importants qui permettent de tester des ACL (ndt : listes de
  contr鬺e d'acc鑣) et de deviner le champ ip->id en ne laissant pas de
  trace dans les journaux (g閚閞alement).

__0004 : Le champ IP id et comment scanner des ports TCP en utilisant de
         l'usurpation d'adresse.

  Chaque paquet IP est identifi� par un champ id de 16 bits. Gr鈉e � ce
  champ id les piles IP sont capables de g閞er la fragmentation. De nombreux
  OS traitent ip->id trivialement : incr閙enter ce champ de 1 champ pour
  chaque paquet envoy�. En utilisant ce champ id vous 阾es au minimum
  capable d'estimer le trafic et de scanner en usurpant l'adresse source.
  OpenBSD >= 2.5 et beaucoup d'autres mettent en oeuvre un champ id
  al閍toire non r閜閠itif ainsi vous ne pouvez pas jouer avec le champ
  ip->id. Le champ ip->id des syst鑝es Windows n'est pas positionn� dans le
  m阭e ordre (ndt : dans le bon ordre), donc vous devez sp閏ifier l'option
  --winid ou -W si vous utilisez hping2 contre un syst鑝e Windows.

  N.B. : Vous 阾es capable de scanner un syst鑝e avec un champ ip->id
         s鹯e/al閍toire parce que pour spoofer vos paquets vous avez besoin
         d'un syst鑝e tiers avec un champ id incr閙ental, mais vous n'avez
         pas besoin que la cible de votre scan ait un champ id incr閙ental.

  Comment estimer le trafic d'un syst鑝e en utilisant le champ ip->id ?
  C'est vraiment tr鑣 simple :

# hping www.yahoo.com -p 80 -A
ppp0 default routing interface selected (according to /proc)
HPING www.yahoo.com (ppp0 204.71.200.74): A set, 40 headers + 0 data bytes
40 bytes from 204.71.200.74: flags=R seq=0 ttl=53 id=29607 win=0 rtt=329.4 ms
40 bytes from 204.71.200.74: flags=R seq=1 ttl=53 id=31549 win=0 rtt=390.0 ms
40 bytes from 204.71.200.74: flags=R seq=2 ttl=53 id=33432 win=0 rtt=390.0 ms
40 bytes from 204.71.200.74: flags=R seq=3 ttl=53 id=35368 win=0 rtt=380.0 ms
40 bytes from 204.71.200.74: flags=R seq=4 ttl=53 id=37335 win=0 rtt=390.0 ms
40 bytes from 204.71.200.74: flags=R seq=5 ttl=53 id=39157 win=0 rtt=380.0 ms
40 bytes from 204.71.200.74: flags=R seq=6 ttl=53 id=41118 win=0 rtt=370.0 ms
40 bytes from 204.71.200.74: flags=R seq=7 ttl=53 id=43330 win=0 rtt=390.0 ms

--- www.yahoo.com hping statistic ---
8 packets tramitted, 8 packets received, 0% packet loss
round-trip min/avg/max = 329.4/377.4/390.0 ms

  Comme vous pouvez le voir le champ id augmente. Le paquet avec le num閞o
  de s閝uence 0 poss鑔e un champ id 間al � 29607, le num閞o 1 � 31549, ainsi
  le syst鑝e www.yahoo.com a envoy� 31549-29607 = 1942 paquets en environ
  une seconde. En utilisant l'option -r ou --relid, hping affiche le delta
  entre les champs id des deux derniers paquets re鐄s.

# hping www.yahoo.com -P 80 -A -r
ppp0 default routing interface selected (according to /proc)
HPING www.yahoo.com (ppp0 204.71.200.68): A set, 40 headers + 0 data bytes
40 bytes from 204.71.200.68: flags=R seq=0 ttl=53 id=65179 win=0 rtt=327.1 ms
40 bytes from 204.71.200.68: flags=R seq=1 ttl=53 id=+1936 win=0 rtt=360.0 ms
40 bytes from 204.71.200.68: flags=R seq=2 ttl=53 id=+1880 win=0 rtt=340.0 ms
40 bytes from 204.71.200.68: flags=R seq=3 ttl=53 id=+1993 win=0 rtt=330.0 ms
40 bytes from 204.71.200.68: flags=R seq=4 ttl=53 id=+1871 win=0 rtt=350.0 ms
40 bytes from 204.71.200.68: flags=R seq=5 ttl=53 id=+1932 win=0 rtt=340.0 ms
40 bytes from 204.71.200.68: flags=R seq=6 ttl=53 id=+1776 win=0 rtt=330.0 ms
40 bytes from 204.71.200.68: flags=R seq=7 ttl=53 id=+1749 win=0 rtt=320.0 ms
40 bytes from 204.71.200.68: flags=R seq=8 ttl=53 id=+1888 win=0 rtt=340.0 ms
40 bytes from 204.71.200.68: flags=R seq=9 ttl=53 id=+1907 win=0 rtt=330.0 ms

--- www.yahoo.com hping statistic ---
10 packets tramitted, 10 packets received, 0% packet loss
round-trip min/avg/max = 320.0/336.7/360.0 ms

  蓈idemment si on v閞ifie le champ id toutes les demi-secondes plut魌 que
  toutes les secondes, l'incr閙ent sera diminu� de moiti�.

# hping www.yahoo.com -P 80 -A -r -i u 500000
ppp0 default routing interface selected (according to /proc)
HPING www.yahoo.com (ppp0 204.71.200.68): A set, 40 headers + 0 data bytes
40 bytes from 204.71.200.68: flags=R seq=0 ttl=53 id=35713 win=0 rtt=327.0 ms
40 bytes from 204.71.200.68: flags=R seq=1 ttl=53 id=+806 win=0 rtt=310.0 ms
40 bytes from 204.71.200.68: flags=R seq=2 ttl=53 id=+992 win=0 rtt=320.0 ms
40 bytes from 204.71.200.68: flags=R seq=3 ttl=53 id=+936 win=0 rtt=330.0 ms
40 bytes from 204.71.200.68: flags=R seq=4 ttl=53 id=+987 win=0 rtt=310.0 ms
40 bytes from 204.71.200.68: flags=R seq=5 ttl=53 id=+952 win=0 rtt=320.0 ms
40 bytes from 204.71.200.68: flags=R seq=6 ttl=53 id=+918 win=0 rtt=330.0 ms
40 bytes from 204.71.200.68: flags=R seq=7 ttl=53 id=+809 win=0 rtt=320.0 ms
40 bytes from 204.71.200.68: flags=R seq=8 ttl=53 id=+881 win=0 rtt=320.0 ms

--- www.yahoo.com hping statistic ---
9 packets tramitted, 9 packets received, 0% packet loss
round-trip min/avg/max = 310.0/320.8/330.0 ms

  N.B. Attention, en utilisant ip->id vous n'阾es capable que d'estimer *le
       nombre de paquets envoy閟/unit� de temps*. Vous ne pouvez pas
       toujours comparer diff閞ents syst鑝es. Le champ ip->id concerne
       toutes les interfaces d'un syst鑝e et par exemple si un syst鑝e
       utilise de la traduction d'adresse ou redirige les connexions TCP
       vers un autre syst鑝e (par exemple un firewall utilis� pour cacher un
       serveur web) l'incr閙ent du champ ip->id peut r閟ulter en de fausses
       augmentations.

  En 'hpingant' les boites windows sans utiliser l'option --winid vous
  verrez que les incr閙ent sont des multiples de 256 � cause d'un ordre des
  octets invers�. Ceci peut 阾re r閑llement utile pour d閠erminer le type
  d'OS.

#hping win95 -r
HPING win95 (eth0 192.168.4.41): NO FLAGS are set, 40 headers + 0 data bytes
46 bytes from 192.168.4.41: flags=RA seq=0 ttl=128 id=47371 win=0 rtt=0.5 ms
46 bytes from 192.168.4.41: flags=RA seq=1 ttl=128 id=+256 win=0 rtt=0.5 ms
46 bytes from 192.168.4.41: flags=RA seq=2 ttl=128 id=+256 win=0 rtt=0.6 ms
46 bytes from 192.168.4.41: flags=RA seq=3 ttl=128 id=+256 win=0 rtt=0.5 ms

--- win95 hping statistic ---
4 packets tramitted, 4 packets received, 0% packet loss
round-trip min/avg/max = 0.5/0.5/0.6 ms

  Les syst鑝es windows sont "marqu閟", ainsi pour d閏ouvrir si un syst鑝e
  est un Windows vous avez juste besoin d'envoyer quelques paquets.

Comment effectuer des scans SYN spoof閟 en utilisant un champ id incr閙ental
? Ce qui suit est le message original (ndt : du moins sa traduction) �
bugtraq � propos de la m閠hode de scan usurp閑/indirecte/passive, dessous
j'essayerai d'expliquer les d閠ails et comment cela est possible m阭e avec
UDP avec quelques restrictions.

---- le postage � bugtraq � propos des scans usurp閟 ----

  Salut,

        J'ai d閏ouvert une nouvelle m閠hode de scan de ports TCP.  Au
        contraire de toutes les autres elle vous permet de scanner en
        utilisant des paquets usurp閟 (ndt : dont l'adresse IP source est
        usurp閑), ainsi les syst鑝es scann閟 ne peuvent pas voir votre
        adresse r閑lle. Afin de r閍liser cela j'utilise trois particularit閟
        bien connues des mises en oeuvre TCP/IP de la plupart des OS.

          (1) * les syst鑝es r閜ondent SYN|ACK � SYN si le port TCP cible
            est ouvert, et RST|ACK si le port TCP cible est ferm�.

          (2) * Vous pouvez conna顃re le nombre de paquets que les syst鑝es
            envoient en utilisant le champ id de l'ent阾e IP. Voir mes
            pr閏閐ents postages '� propos de l'ent阾e IP' dans cette mailing
            liste.

          (3) * les syst鑝es r閜ondent RST � SYN|ACK, ne r閜ondent rien �
            RST.


        Les joueurs:

          syst鑝e A - le syst鑝e malfaisant, l'attaquant.
          syst鑝e B - le syst鑝e silencieux.
          syst鑝e C - le syst鑝e victime.

        A est votre syst鑝e.
        B est un syst鑝e particulier : il ne doit envoyer aucun paquet
         pendant que vous scannez C. Il y a 閚orm閙ent de syst鑝es � 'trafic
         nul' sur Internet, sp閏ialement la nuit :)
        C est la victime, il doit 阾re vuln閞able aux scans SYN.

        J'ai appel� cette m閠hode de scan 'scan du syst鑝e muet' (ndt :
        l'autre traduction de 'dumb' est b阾e) en r閒閞ence aux
        caract閞istiques du syst鑝e B.


        Comment elle fonctionne :

        Le syst鑝e A surveille le nombre de paquets sortants depuis B en
        utilisant le champ id de l'ent阾e IP. Vous pouvez faire ceci
        simplement en utilisant hping :

#hping B -r
HPING B (eth0 xxx.yyy.zzz.jjj): no flags are set, 40 data bytes
60 bytes from xxx.yyy.zzz.jjj: flags=RA seq=0 ttl=64 id=41660 win=0 time=1.2 ms
60 bytes from xxx.yyy.zzz.jjj: flags=RA seq=1 ttl=64 id=+1 win=0 time=75 ms
60 bytes from xxx.yyy.zzz.jjj: flags=RA seq=2 ttl=64 id=+1 win=0 time=91 ms
60 bytes from xxx.yyy.zzz.jjj: flags=RA seq=3 ttl=64 id=+1 win=0 time=90 ms
60 bytes from xxx.yyy.zzz.jjj: flags=RA seq=4 ttl=64 id=+1 win=0 time=91 ms
60 bytes from xxx.yyy.zzz.jjj: flags=RA seq=5 ttl=64 id=+1 win=0 time=87 ms
-cut-
..
.

        Comme vous pouvez le voir, les incr閙ents du champ id sont toujours
        de 1. Ainsi ce syst鑝e a la caract閞istique requise pour jouer le
        r鬺e de B.

        Maintenant le syst鑝e A envoie des paquets SYN au port X de C en
        usurpant l'adresse source de B.
        (avec hping => 0.67 c'est tr鑣 facile, http://www.kyuzz.org/antirez)
        si le port X de C est ouvert, le syst鑝e C enverra SYN|ACK � B (oui,
        le syst鑝e C ne sait pas que le v閞itable exp閐iteur est A). Dans ce
        cas le syst鑝e B r閜ond au SYN|ACK avec un RST.
        Si nous envoyons au syst鑝e C quelques paquets SYN il r閜ondra � B
        quelques paquet SYN|ACK, ainsi B r閜ondra � C quelques RST... ainsi
        nous verrons que le syst鑝e B est en train d'envoyer des paquets !

.
..
-cut-
60 bytes from xxx.yyy.zzz.jjj: flags=RA seq=17 ttl=64 id=+1 win=0 time=96 ms
60 bytes from xxx.yyy.zzz.jjj: flags=RA seq=18 ttl=64 id=+1 win=0 time=80 ms
60 bytes from xxx.yyy.zzz.jjj: flags=RA seq=19 ttl=64 id=+2 win=0 time=83 ms
60 bytes from xxx.yyy.zzz.jjj: flags=RA seq=20 ttl=64 id=+3 win=0 time=94 ms
60 bytes from xxx.yyy.zzz.jjj: flags=RA seq=21 ttl=64 id=+1 win=0 time=92 ms
60 bytes from xxx.yyy.zzz.jjj: flags=RA seq=22 ttl=64 id=+2 win=0 time=82 ms
-cut-
..
.

        Le port est ouvert !

        Par contre, si le port X de C est ferm� alors en envoyant � C
        quelques paquets SYN avec l'adresse usurp閑 de B, il r閜ondra avec
        des paquets RST � B, et B ne r閜ondra pas (voir 3). Ainsi nous
        verrons que le syst鑝e B n'est en train d'envoyer aucun paquet :

.
..
-cut-
60 bytes from xxx.yyy.zzz.jjj: flags=RA seq=52 ttl=64 id=+1 win=0 time=85 ms
60 bytes from xxx.yyy.zzz.jjj: flags=RA seq=53 ttl=64 id=+1 win=0 time=83 ms
60 bytes from xxx.yyy.zzz.jjj: flags=RA seq=54 ttl=64 id=+1 win=0 time=93 ms
60 bytes from xxx.yyy.zzz.jjj: flags=RA seq=55 ttl=64 id=+1 win=0 time=74 ms
60 bytes from xxx.yyy.zzz.jjj: flags=RA seq=56 ttl=64 id=+1 win=0 time=95 ms
60 bytes from xxx.yyy.zzz.jjj: flags=RA seq=57 ttl=64 id=+1 win=0 time=81 ms
-cut-
..
.

        Le port est ferm�.

        Tout ceci peut para顃re compliqu� � r閍liser, mais utiliser deux
        sessions de hping dans des consoles virtuelles Linux ou sous X rend
        cela plus simple.
        La premi鑢e session surveille le syst鑝e B : hping B -r
        La seconde session envoie des paquets SYN spoof閟 : hping C -a B -S

        D閟ol� si mon anglais n'est pas clair.
        Cependant ce postage n'est pas ad閝uat pour d閏rire exhaustivement
        cette m閠hode de scan, ainsi je vais 閏rire un article � ce sujet,
        en particulier comment mettre en oeuvre ceci dans un scanner de
        ports (i.e.  nmap), et � propos des caract閞istiques des joueurs et
        des OS utilis閟.

bonne nouvelle ann閑,
antirez

---- EOF ----

  Comme vous pouvez le voir un scan usurp� est trivial � r閍liser,
  particuli鑢ement en utilisant hping2 vous 阾es capable de sp閏ifier un
  intervalle en micro secondes (-i uX) ainsi vous n'avez pas besoin que le
  syst鑝e B soit un syst鑝e totalement passif. Vous pouvez lire l'incr閙ent
  du champ id une fois toutes les secondes en envoyant 10 paquets SYN par
  seconde. Si vous envoyez un nombre ad閝uat de paquets SYN par seconde,
  l'incr閙ent du champ id attendu est si important que vous 阾es � m阭e de
  voir si le port est ouvert ou ferm� m阭e si le syst鑝e B envoie d'autres
  paquets. Exemple :

# hping awake.host.org -p 80 -A -r
ppp0 default routing interface selected (according to /proc)
HPING server.alicom.com (ppp0 111.222.333.44): A set, 40 headers + 0 data bytes
40 bytes from 111.222.333.44: flags=R seq=0 ttl=249 id=47323 win=0 rtt=239.7 ms
40 bytes from 111.222.333.44: flags=R seq=1 ttl=249 id=+6 win=0 rtt=630.0 ms
40 bytes from 111.222.333.44: flags=R seq=2 ttl=249 id=+6 win=0 rtt=280.0 ms
40 bytes from 111.222.333.44: flags=R seq=3 ttl=249 id=+8 win=0 rtt=340.0 ms
40 bytes from 111.222.333.44: flags=R seq=4 ttl=249 id=+5 win=0 rtt=440.0 ms
40 bytes from 111.222.333.44: flags=R seq=5 ttl=249 id=+5 win=0 rtt=410.0 ms
40 bytes from 111.222.333.44: flags=R seq=6 ttl=249 id=+8 win=0 rtt=1509.9 ms
40 bytes from 111.222.333.44: flags=R seq=7 ttl=249 id=+4 win=0 rtt=1460.0 ms
40 bytes from 111.222.333.44: flags=R seq=8 ttl=249 id=+7 win=0 rtt=770.0 ms
40 bytes from 111.222.333.44: flags=R seq=9 ttl=249 id=+5 win=0 rtt=230.0 ms
...

  comme vous pouvez le voir, ce syst鑝e n'est pas inactif, il envoie environ
  6 paquets chaque seconde. Maintenant scannez le port 80 de www.yahoo.com
  pour voir s'il est ouvert :

root.1# hping -a server.alicom.com -S -p 80 -i u10000 www.yahoo.com
ppp0 default routing interface selected (according to /proc)
HPING www.yahoo.com (ppp0 204.71.200.74): S set, 40 headers + 0 data bytes

[attendre quelques secondes et presser CTRL+C]

--- www.yahoo.com hping statistic ---
130 packets tramitted, 0 packets received, 100% packet loss
round-trip min/avg/max = 0.0/0.0/0.0 ms

  En observant la sortie de 'hping awake.host.org -p 80 -A -r' il est
  simple de comprendre que le port 80 de www.yahoo.com est ouvert :

40 bytes from 111.222.333.44: flags=R seq=59 ttl=249 id=+16 win=0 rtt=380.0 ms
40 bytes from 111.222.333.44: flags=R seq=60 ttl=249 id=+75 win=0 rtt=850.0 ms
40 bytes from 111.222.333.44: flags=R seq=61 ttl=249 id=+12 win=0 rtt=1050.0 ms
40 bytes from 111.222.333.44: flags=R seq=62 ttl=249 id=+1 win=0 rtt=450.0 ms
40 bytes from 111.222.333.44: flags=R seq=63 ttl=249 id=+27 win=0 rtt=230.0 ms
40 bytes from 111.222.333.44: flags=R seq=64 ttl=249 id=+11 win=0 rtt=850.0 ms

  notez que 16+75+12+27+11+1-6 = 136 et que nous avons envoy� 130 paquets. 
  Ainsi il est tr鑣 probable que les incr閙ents soient produits par nos
  paquets.

  Conseil : en utilisant un syst鑝e inactif pour r閍liser un scan usurp� il
            est utile de ne montrer que les r閜onses qui montrent un
            incr閙ent diff閞ent de 1. Essayez
            `hping host -r | grep -v "id=+1"'
